"""
Module de messagerie directe pour LeS√©minaire[BOT].
G√®re l'envoi de messages priv√©s aux membres pour les annonces et le syst√®me de bienvenue.
"""

import discord
from discord.ext import commands
import asyncio
import logging
import typing
import datetime
from datetime import timedelta

# Configuration du logger
logger = logging.getLogger('le_seminaire.messenger')

class Messenger(commands.Cog):
    """Syst√®me de messagerie directe du bot LeS√©minaire."""

    def __init__(self, bot):
        self.bot = bot
        # File d'attente des annonces √† envoyer
        self.pending_announcements = []
        self.announcement_task = self.bot.loop.create_task(self.process_announcement_queue())
        
        # Acc√®s √† la base de donn√©es via database.py
        from database import DatabaseManager
        self.db = DatabaseManager()

    def _get_user_preferences(self, user_id):
        """R√©cup√®re les pr√©f√©rences de messagerie d'un utilisateur depuis la base de donn√©es."""
        from models import MessagePreference
        
        try:
            session = self.db.get_session()
            pref = session.query(MessagePreference).filter_by(user_id=str(user_id)).first()
            
            if not pref:
                # Cr√©er une entr√©e par d√©faut si elle n'existe pas
                pref = MessagePreference(user_id=str(user_id), opt_out=False)
                session.add(pref)
                session.commit()
            
            return pref
        except Exception as e:
            logger.error(f"Erreur lors de la r√©cup√©ration des pr√©f√©rences de l'utilisateur {user_id}: {str(e)}")
            return None
        finally:
            session.close()

    def _is_user_opted_out(self, user_id):
        """V√©rifie si un utilisateur a d√©sactiv√© les messages du bot."""
        pref = self._get_user_preferences(user_id)
        return pref and pref.opt_out

    def _set_user_opt_out(self, user_id, opt_out=True):
        """D√©finit l'√©tat d'opt-out d'un utilisateur."""
        from models import MessagePreference
        
        try:
            session = self.db.get_session()
            pref = session.query(MessagePreference).filter_by(user_id=str(user_id)).first()
            
            if not pref:
                pref = MessagePreference(user_id=str(user_id), opt_out=opt_out)
                session.add(pref)
            else:
                pref.opt_out = opt_out
            
            session.commit()
            return True
        except Exception as e:
            logger.error(f"Erreur lors de la d√©finition des pr√©f√©rences de l'utilisateur {user_id}: {str(e)}")
            return False
        finally:
            session.close()

    def _update_last_dm_time(self, user_id):
        """Met √† jour l'horodatage du dernier message envoy√© √† un utilisateur."""
        from models import MessagePreference
        import datetime
        
        try:
            session = self.db.get_session()
            pref = session.query(MessagePreference).filter_by(user_id=str(user_id)).first()
            
            if not pref:
                pref = MessagePreference(user_id=str(user_id), last_dm=datetime.datetime.utcnow())
                session.add(pref)
            else:
                pref.last_dm = datetime.datetime.utcnow()
            
            session.commit()
            return True
        except Exception as e:
            logger.error(f"Erreur lors de la mise √† jour de l'horodatage pour l'utilisateur {user_id}: {str(e)}")
            return False
        finally:
            session.close()

    def _check_dm_cooldown(self, user_id):
        """V√©rifie si un utilisateur est en cooldown pour les DMs."""
        from models import MessagePreference
        import datetime
        
        try:
            session = self.db.get_session()
            pref = session.query(MessagePreference).filter_by(user_id=str(user_id)).first()
            
            if not pref or not pref.last_dm:
                return False  # Pas de cooldown si pas d'entr√©e ou pas de dernier DM
            
            # V√©rifier si 24 heures se sont √©coul√©es depuis le dernier DM
            now = datetime.datetime.utcnow()
            cooldown_expired = now - pref.last_dm > datetime.timedelta(hours=24)
            
            return not cooldown_expired  # True si toujours en cooldown
        except Exception as e:
            logger.error(f"Erreur lors de la v√©rification du cooldown pour l'utilisateur {user_id}: {str(e)}")
            return False  # En cas d'erreur, on permet l'envoi
        finally:
            session.close()

    def cog_unload(self):
        """Nettoyage lors du d√©chargement du cog."""
        if self.announcement_task:
            self.announcement_task.cancel()

    async def process_announcement_queue(self):
        """Traite la file d'attente des annonces pour √©viter le rate limiting."""
        await self.bot.wait_until_ready()
        
        while not self.bot.is_closed():
            try:
                if self.pending_announcements:
                    # R√©cup√©rer la prochaine annonce de la file
                    announcement = self.pending_announcements.pop(0)
                    guild_id = announcement['guild_id']
                    message = announcement['message']
                    filter_roles = announcement.get('filter_roles', [])
                    
                    guild = self.bot.get_guild(int(guild_id))
                    if not guild:
                        logger.error(f"Impossible de trouver le serveur ID: {guild_id}")
                        continue
                    
                    # Filtrer les membres en fonction des r√¥les si n√©cessaire
                    members = []
                    if filter_roles:
                        role_ids = [int(r) for r in filter_roles]
                        for member in guild.members:
                            member_role_ids = [role.id for role in member.roles]
                            if any(r in member_role_ids for r in role_ids):
                                members.append(member)
                    else:
                        members = guild.members
                    
                    # Envoyer l'annonce √† chaque membre
                    success_count = 0
                    failed_count = 0
                    opted_out_count = 0
                    
                    for member in members:
                        # Ignorer les bots et les utilisateurs ayant d√©sactiv√© les DMs
                        if member.bot:
                            continue
                            
                        if self._is_user_opted_out(member.id):
                            opted_out_count += 1
                            continue
                        
                        # V√©rifier les cooldowns
                        if self._check_dm_cooldown(member.id):
                            continue
                        
                        try:
                            await member.send(message)
                            self._update_last_dm_time(member.id)
                            success_count += 1
                            
                            # Pause pour √©viter le rate limiting
                            await asyncio.sleep(1.5)
                        except discord.Forbidden:
                            failed_count += 1
                            logger.warning(f"Impossible d'envoyer un DM √† {member.name}#{member.discriminator} (ID: {member.id})")
                        except Exception as e:
                            failed_count += 1
                            logger.error(f"Erreur lors de l'envoi d'un DM √† {member.name}#{member.discriminator}: {str(e)}")
                    
                    # Journaliser les r√©sultats
                    logger.info(f"Annonce envoy√©e: {success_count} succ√®s, {failed_count} √©checs, {opted_out_count} d√©sactiv√©s")
                
                # Attendre avant de traiter le prochain lot
                await asyncio.sleep(5)
            except Exception as e:
                logger.error(f"Erreur dans la file d'annonces: {str(e)}")
                await asyncio.sleep(30)  # Pause plus longue en cas d'erreur

    @commands.Cog.listener()
    async def on_member_join(self, member):
        """Envoie un message de bienvenue aux nouveaux membres."""
        if member.bot or self._is_user_opted_out(member.id):
            return
        
        # Cr√©er un embed de bienvenue
        embed = discord.Embed(
            title=f"Bienvenue sur Le S√©minaire, {member.name}!",
            description="Merci de rejoindre notre communaut√© artistique. Nous sommes ravis de t'accueillir!",
            color=discord.Color.blue()
        )
        
        embed.add_field(
            name="üëã Pr√©sente-toi",
            value="N'h√©site pas √† te pr√©senter dans le canal #pr√©sentations et √† interagir avec la communaut√©!",
            inline=False
        )
        
        embed.add_field(
            name="üîó Rejoins-nous sur nos autres plateformes",
            value="[Linktree du S√©minaire](https://linktr.ee/LeSeminaire)",
            inline=False
        )
        
        embed.add_field(
            name="üé≠ Obtiens tes r√¥les",
            value="Visite le canal #roles pour choisir tes r√¥les et sp√©cialit√©s artistiques!",
            inline=False
        )
        
        embed.add_field(
            name="üìú R√®gles",
            value="N'oublie pas de lire les r√®gles du serveur et de r√©agir pour obtenir l'acc√®s complet.",
            inline=False
        )
        
        embed.set_thumbnail(url=member.guild.icon.url if member.guild.icon else discord.Embed.Empty)
        embed.set_footer(text="Pour d√©sactiver les messages du bot, tape !optout")
        
        try:
            await member.send(embed=embed)
            logger.info(f"Message de bienvenue envoy√© √† {member.name}#{member.discriminator}")
        except discord.Forbidden:
            logger.warning(f"Impossible d'envoyer un message de bienvenue √† {member.name}#{member.discriminator}")
        except Exception as e:
            logger.error(f"Erreur lors de l'envoi du message de bienvenue: {str(e)}")

    @commands.group(name="dm", invoke_without_command=True)
    @commands.has_permissions(administrator=True)
    async def dm_group(self, ctx):
        """Commandes pour la gestion des messages directs."""
        await ctx.send_help(ctx.command)

    @dm_group.command(name="send")
    @commands.has_permissions(administrator=True)
    async def dm_send_cmd(self, ctx, *, message: str):
        """
        Envoie un message priv√© √† tous les membres du serveur.
        
        Exemple:
        !dm send Salut √† tous! Nouvel √©v√©nement demain √† 20h!
        """
        # Demander confirmation
        confirmation_message = await ctx.send(
            f"‚ö†Ô∏è **Confirmation requise** ‚ö†Ô∏è\n"
            f"Tu es sur le point d'envoyer un DM √† **{len(ctx.guild.members) - 1}** membres.\n"
            f"```{message}```\n"
            f"Es-tu s√ªr de vouloir continuer? (oui/non)"
        )
        
        def check(m):
            return m.author == ctx.author and m.channel == ctx.channel and m.content.lower() in ['oui', 'non', 'yes', 'no']
        
        try:
            response = await self.bot.wait_for('message', check=check, timeout=60)
            
            if response.content.lower() in ['non', 'no']:
                await confirmation_message.delete()
                return await ctx.send("Envoi annul√©.")
            
            announcement = {
                'guild_id': str(ctx.guild.id),
                'message': message,
                'filter_roles': []
            }
            
            self.pending_announcements.append(announcement)
            await ctx.send(f"‚úÖ Message ajout√© √† la file d'attente! Il sera envoy√© progressivement aux membres.")
            
        except asyncio.TimeoutError:
            await confirmation_message.delete()
            await ctx.send("D√©lai d'attente d√©pass√©. Veuillez r√©essayer.")

    @dm_group.command(name="announce")
    @commands.has_permissions(administrator=True)
    async def dm_announce_cmd(self, ctx, *, announcement: str):
        """
        Envoie une annonce √† tous les membres du serveur.
        Le message sera format√© automatiquement avec un en-t√™te et un pied de page.
        
        Exemple:
        !dm announce Nouvel √©v√©nement ce weekend! Venez nombreux!
        """
        formatted_message = (
            f"üì¢ **Annonce de {ctx.guild.name}** üì¢\n\n"
            f"{announcement}\n\n"
            f"üîó Rejoignez-nous: https://linktr.ee/LeSeminaire\n"
            f"_Pour d√©sactiver ces messages, utilisez la commande `!optout`_"
        )
        
        # Appeler la commande d'envoi avec le message format√©
        await self.dm_send_cmd(ctx, message=formatted_message)

    @dm_group.command(name="event")
    @commands.has_permissions(administrator=True)
    async def dm_event_cmd(self, ctx, date: str, heure: str, *, description: str):
        """
        Envoie une invitation d'√©v√©nement √† tous les membres.
        
        Exemple:
        !dm event 21/07/2025 20:00 Session d'enregistrement au studio
        """
        event_message = (
            f"üóìÔ∏è **√âv√©nement √† venir** üóìÔ∏è\n\n"
            f"üìÖ Date: **{date}**\n"
            f"‚è∞ Heure: **{heure}**\n\n"
            f"üìù **Description:**\n{description}\n\n"
            f"üîó Plus d'infos: https://linktr.ee/LeSeminaire\n"
            f"_Pour d√©sactiver ces messages, utilisez la commande `!optout`_"
        )
        
        # Appeler la commande d'envoi avec le message format√©
        await self.dm_send_cmd(ctx, message=event_message)

    @dm_group.command(name="role")
    @commands.has_permissions(administrator=True)
    async def dm_role_cmd(self, ctx, role: discord.Role, *, message: str):
        """
        Envoie un message priv√© √† tous les membres ayant un r√¥le sp√©cifique.
        
        Exemple:
        !dm role @Artiste Message sp√©cial pour les artistes!
        """
        members_with_role = [member for member in ctx.guild.members if role in member.roles]
        
        if not members_with_role:
            return await ctx.send(f"Aucun membre n'a le r√¥le {role.name}.")
        
        # Demander confirmation
        confirmation_message = await ctx.send(
            f"‚ö†Ô∏è **Confirmation requise** ‚ö†Ô∏è\n"
            f"Tu es sur le point d'envoyer un DM √† **{len(members_with_role)}** membres avec le r√¥le {role.name}.\n"
            f"```{message}```\n"
            f"Es-tu s√ªr de vouloir continuer? (oui/non)"
        )
        
        def check(m):
            return m.author == ctx.author and m.channel == ctx.channel and m.content.lower() in ['oui', 'non', 'yes', 'no']
        
        try:
            response = await self.bot.wait_for('message', check=check, timeout=60)
            
            if response.content.lower() in ['non', 'no']:
                await confirmation_message.delete()
                return await ctx.send("Envoi annul√©.")
            
            announcement = {
                'guild_id': str(ctx.guild.id),
                'message': message,
                'filter_roles': [str(role.id)]
            }
            
            self.pending_announcements.append(announcement)
            await ctx.send(f"‚úÖ Message ajout√© √† la file d'attente! Il sera envoy√© progressivement aux membres avec le r√¥le {role.name}.")
            
        except asyncio.TimeoutError:
            await confirmation_message.delete()
            await ctx.send("D√©lai d'attente d√©pass√©. Veuillez r√©essayer.")

    @commands.command(name="optout")
    async def optout_cmd(self, ctx):
        """
        D√©sactive la r√©ception des messages du bot.
        Les messages importants li√©s √† la mod√©ration pourront toujours √™tre envoy√©s.
        """
        if ctx.guild is None:  # Commande utilis√©e en DM
            user_id = ctx.author.id
            
            if self._is_user_opted_out(user_id):
                await ctx.send("Vous √™tes d√©j√† d√©sabonn√© des messages du bot.")
            else:
                success = self._set_user_opt_out(user_id, True)
                if success:
                    await ctx.send("‚úÖ Vous √™tes maintenant d√©sabonn√© des messages du bot. Pour vous r√©abonner, utilisez `!optin`.")
                else:
                    await ctx.send("‚ùå Une erreur s'est produite lors du d√©sabonnement. Veuillez r√©essayer.")
        else:  # Commande utilis√©e sur le serveur
            await ctx.send("Pour votre confidentialit√©, veuillez utiliser cette commande en message priv√©.")
            try:
                await ctx.author.send("Pour d√©sactiver les messages du bot, utilisez la commande `!optout` ici en message priv√©.")
            except discord.Forbidden:
                await ctx.send("Je n'ai pas pu vous envoyer de message priv√©. Veuillez v√©rifier vos param√®tres de confidentialit√©.")

    @commands.command(name="optin")
    async def optin_cmd(self, ctx):
        """
        R√©active la r√©ception des messages du bot.
        """
        if ctx.guild is None:  # Commande utilis√©e en DM
            user_id = ctx.author.id
            
            if not self._is_user_opted_out(user_id):
                await ctx.send("Vous √™tes d√©j√† abonn√© aux messages du bot.")
            else:
                success = self._set_user_opt_out(user_id, False)
                if success:
                    await ctx.send("‚úÖ Vous √™tes maintenant r√©abonn√© aux messages du bot. Pour vous d√©sabonner, utilisez `!optout`.")
                else:
                    await ctx.send("‚ùå Une erreur s'est produite lors du r√©abonnement. Veuillez r√©essayer.")
        else:  # Commande utilis√©e sur le serveur
            await ctx.send("Pour votre confidentialit√©, veuillez utiliser cette commande en message priv√©.")
            try:
                await ctx.author.send("Pour r√©activer les messages du bot, utilisez la commande `!optin` ici en message priv√©.")
            except discord.Forbidden:
                await ctx.send("Je n'ai pas pu vous envoyer de message priv√©. Veuillez v√©rifier vos param√®tres de confidentialit√©.")

    @commands.command(name="residency", aliases=["residence"])
    async def residency_cmd(self, ctx):
        """
        Envoie en message priv√© les informations sur la prochaine r√©sidence.
        """
        # Informations sur la r√©sidence actuelle/prochaine
        residency_info = "Concarneau : 21 au 26 juillet 2025"
        
        embed = discord.Embed(
            title="üèùÔ∏è Prochaine R√©sidence du S√©minaire",
            description=f"**{residency_info}**",
            color=discord.Color.green()
        )
        
        embed.add_field(
            name="üéµ Programme",
            value="‚Ä¢ Sessions d'enregistrement\n‚Ä¢ Ateliers d'√©criture\n‚Ä¢ Collaborations\n‚Ä¢ Concerts",
            inline=False
        )
        
        embed.add_field(
            name="üìç Lieu",
            value="Studio Le S√©minaire\nConcarneau, Bretagne",
            inline=True
        )
        
        embed.add_field(
            name="üë• Participants",
            value="Artistes s√©lectionn√©s\n(places limit√©es)",
            inline=True
        )
        
        embed.add_field(
            name="üîó Plus d'informations",
            value="[Linktree du S√©minaire](https://linktr.ee/LeSeminaire)",
            inline=False
        )
        
        embed.set_footer(text="Pour tout renseignement suppl√©mentaire, contactez un administrateur")
        
        try:
            await ctx.author.send(embed=embed)
            if ctx.guild:  # Si la commande est utilis√©e sur un serveur
                await ctx.send("üì¨ Informations sur la r√©sidence envoy√©es en message priv√©!")
        except discord.Forbidden:
            await ctx.send("‚ùå Je n'ai pas pu vous envoyer de message priv√©. Veuillez v√©rifier vos param√®tres de confidentialit√©.")
        except Exception as e:
            logger.error(f"Erreur lors de l'envoi des informations de r√©sidence: {str(e)}")
            await ctx.send("Une erreur s'est produite lors de l'envoi du message.")

    @dm_group.command(name="welcome")
    @commands.has_permissions(administrator=True)
    async def dm_welcome_cmd(self, ctx, member: discord.Member):
        """
        Envoie un message de bienvenue personnalis√© √† un membre sp√©cifique.
        
        Exemple:
        !dm welcome @Utilisateur
        """
        if member.bot:
            return await ctx.send("‚ùå Impossible d'envoyer un message √† un bot.")
        
        if self._is_user_opted_out(member.id):
            return await ctx.send(f"‚ö†Ô∏è {member.mention} a d√©sactiv√© la r√©ception des messages du bot.")
        
        # Cr√©er un embed de bienvenue personnalis√©
        embed = discord.Embed(
            title=f"Bienvenue sur Le S√©minaire, {member.name}!",
            description=f"Message personnalis√© de {ctx.author.mention} !\nMerci de rejoindre notre communaut√© artistique. Nous sommes ravis de t'accueillir!",
            color=discord.Color.blue()
        )
        
        embed.add_field(
            name="üëã Pr√©sente-toi",
            value="N'h√©site pas √† te pr√©senter dans le canal #pr√©sentations et √† interagir avec la communaut√©!",
            inline=False
        )
        
        embed.add_field(
            name="üîó Rejoins-nous sur nos autres plateformes",
            value="[Linktree du S√©minaire](https://linktr.ee/LeSeminaire)",
            inline=False
        )
        
        embed.add_field(
            name="üì© Message de l'√©quipe",
            value="N'h√©site pas √† contacter un membre de l'√©quipe si tu as des questions!",
            inline=False
        )
        
        embed.set_thumbnail(url=member.guild.icon.url if member.guild.icon else discord.Embed.Empty)
        embed.set_footer(text="Pour d√©sactiver les messages du bot, tape !optout")
        
        try:
            await member.send(embed=embed)
            await ctx.send(f"‚úÖ Message de bienvenue personnalis√© envoy√© √† {member.mention}!")
            logger.info(f"Message de bienvenue personnalis√© envoy√© √† {member.name}#{member.discriminator} par {ctx.author.name}")
        except discord.Forbidden:
            await ctx.send(f"‚ùå Impossible d'envoyer un message priv√© √† {member.mention}. Leurs param√®tres de confidentialit√© ne le permettent pas.")
        except Exception as e:
            logger.error(f"Erreur lors de l'envoi du message de bienvenue personnalis√©: {str(e)}")
            await ctx.send(f"‚ùå Une erreur s'est produite lors de l'envoi du message √† {member.mention}.")

async def setup(bot):
    """Ajoute le cog de messagerie au bot."""
    await bot.add_cog(Messenger(bot))