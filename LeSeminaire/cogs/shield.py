"""
Module de protection (Shield) pour LeS√©minaire[BOT].
Fournit une protection avanc√©e contre les attaques DDoS, les bots malveillants et autres menaces.
"""
import discord
from discord.ext import commands, tasks
import datetime
import asyncio
import logging
import json
import os
import re
import typing
from collections import defaultdict, deque

# Configuration des niveaux de protection
SHIELD_LEVELS = {
    "low": {
        "join_rate_limit": 5,  # membres par minute
        "verification_required": False,  # exiger la v√©rification
        "invite_restriction": False,  # restreindre les invitations
        "new_account_restriction": False,  # restreindre les nouveaux comptes
        "auto_ban_suspicious": False,  # bannir automatiquement les comptes suspects
    },
    "medium": {
        "join_rate_limit": 3,
        "verification_required": True,
        "invite_restriction": False,
        "new_account_restriction": True,  # comptes de moins de 3 jours
        "auto_ban_suspicious": False,
    },
    "high": {
        "join_rate_limit": 2,
        "verification_required": True,
        "invite_restriction": True,
        "new_account_restriction": True,  # comptes de moins de 7 jours
        "auto_ban_suspicious": True,
    },
    "lockdown": {
        "join_rate_limit": 1,
        "verification_required": True,
        "invite_restriction": True,
        "new_account_restriction": True,  # comptes de moins de 14 jours
        "auto_ban_suspicious": True,
    }
}

# Mod√®les suspects (noms d'utilisateurs, caract√©ristiques des bots, etc.)
SUSPICIOUS_PATTERNS = [
    r"discord\.gg\/",  # lien d'invitation Discord
    r"[a-zA-Z0-9]{15,}",  # longue cha√Æne al√©atoire
    r"(nitro|free|gift|steam|airdrop)",  # mots-cl√©s de scam
    r".*(h-t-t-p-s|h.t.t.p.s|h_t_t_p_s).*",  # URLs obfusqu√©es
    r"[a-zA-Z0-9]+\.[a-z]{2,6}\/[a-zA-Z0-9]+",  # URL simplifi√©e
]

class Shield(commands.Cog):
    """Syst√®me de protection avanc√© pour LeS√©minaire[BOT]."""
    
    def __init__(self, bot):
        self.bot = bot
        self.shield_level = "medium"  # niveau par d√©faut
        self.join_history = defaultdict(lambda: deque(maxlen=60))  # {guild_id: deque[(member, timestamp)]}
        self.lockdown_status = {}  # {guild_id: {'active': bool, 'until': timestamp}}
        self.verification_channels = {}  # {guild_id: channel_id}
        self.suspicious_patterns = [re.compile(pattern, re.IGNORECASE) for pattern in SUSPICIOUS_PATTERNS]
        self.trusted_members = set()  # ensemble d'IDs de membres de confiance
        self.action_logs = defaultdict(list)  # {guild_id: [actions]}
        
        # D√©marrer les t√¢ches de surveillance
        self.check_lockdowns.start()
        self.scan_guild_members.start()
        
        # Logger
        self.logger = logging.getLogger('shield')
        handler = logging.FileHandler(filename='shield.log', encoding='utf-8', mode='a')
        self.logger.addHandler(handler)
        
        # Charger les donn√©es persistantes (si disponibles)
        self._load_data()
    
    def _load_data(self):
        """Charge les donn√©es persistantes depuis un fichier."""
        try:
            if os.path.exists('shield_data.json'):
                with open('shield_data.json', 'r') as f:
                    data = json.load(f)
                    
                    if 'shield_level' in data:
                        self.shield_level = data['shield_level']
                    
                    if 'verification_channels' in data:
                        self.verification_channels = data['verification_channels']
                    
                    if 'trusted_members' in data:
                        self.trusted_members = set(data['trusted_members'])
                    
                    if 'lockdown_status' in data:
                        self.lockdown_status = data['lockdown_status']
        except Exception as e:
            self.logger.error(f"Erreur lors du chargement des donn√©es du bouclier: {e}")
    
    def _save_data(self):
        """Sauvegarde les donn√©es persistantes dans un fichier."""
        try:
            data = {
                'shield_level': self.shield_level,
                'verification_channels': self.verification_channels,
                'trusted_members': list(self.trusted_members),
                'lockdown_status': self.lockdown_status
            }
            
            with open('shield_data.json', 'w') as f:
                json.dump(data, f)
        except Exception as e:
            self.logger.error(f"Erreur lors de la sauvegarde des donn√©es du bouclier: {e}")
    
    def cog_unload(self):
        """Nettoyage lors du d√©chargement du cog."""
        self.check_lockdowns.cancel()
        self.scan_guild_members.cancel()
        self._save_data()
    
    @tasks.loop(minutes=5)
    async def check_lockdowns(self):
        """V√©rifie les verrouillages actifs et les d√©sactive si n√©cessaire."""
        current_time = datetime.datetime.now().timestamp()
        
        for guild_id, status in list(self.lockdown_status.items()):
            if status.get('active', False) and status.get('until', 0) < current_time:
                # Le verrouillage est expir√©, le d√©sactiver
                await self._disable_lockdown(guild_id)
    
    @tasks.loop(minutes=15)
    async def scan_guild_members(self):
        """Analyse p√©riodique des membres du serveur pour d√©tecter les comptes suspects."""
        config = SHIELD_LEVELS[self.shield_level]
        
        if not config['auto_ban_suspicious']:
            return  # Ne pas scanner si la fonctionnalit√© est d√©sactiv√©e
        
        for guild in self.bot.guilds:
            suspicious_members = []
            
            # Analyser les membres pour d√©tecter les motifs suspects
            for member in guild.members:
                if await self._is_suspicious(member) and not self._is_trusted(member):
                    suspicious_members.append(member)
            
            if suspicious_members:
                # Alerter dans le canal syst√®me
                system_channel = guild.system_channel
                if system_channel:
                    embed = discord.Embed(
                        title="üõ°Ô∏è Alerte de S√©curit√©",
                        description=f"Le scan de s√©curit√© a d√©tect√© {len(suspicious_members)} compte(s) suspect(s).",
                        color=discord.Color.red()
                    )
                    
                    for i, member in enumerate(suspicious_members[:5]):  # Limiter √† 5 pour √©viter des embeds trop grands
                        embed.add_field(
                            name=f"Compte Suspect #{i+1}",
                            value=f"**Utilisateur**: {member.mention}\n**Cr√©√© le**: {member.created_at.strftime('%d/%m/%Y')}\n**Rejoint le**: {member.joined_at.strftime('%d/%m/%Y') if member.joined_at else 'Inconnu'}",
                            inline=False
                        )
                    
                    if len(suspicious_members) > 5:
                        embed.add_field(
                            name="Note",
                            value=f"Et {len(suspicious_members) - 5} autre(s) compte(s) suspect(s)...",
                            inline=False
                        )
                    
                    await system_channel.send(embed=embed)
                
                # Enregistrer dans les logs
                self.logger.warning(f"Comptes suspects d√©tect√©s sur {guild.name}: {', '.join([f'{m.name}#{m.discriminator}' for m in suspicious_members])}")
    
    @check_lockdowns.before_loop
    @scan_guild_members.before_loop
    async def before_task(self):
        """Attendre que le bot soit pr√™t avant de d√©marrer les t√¢ches."""
        await self.bot.wait_until_ready()
    
    @commands.Cog.listener()
    async def on_member_join(self, member):
        """Gestion des nouveaux arrivants selon le niveau de protection."""
        # Ignorer les bots (ils sont d√©j√† v√©rifi√©s par l'API Discord)
        if member.bot:
            return
        
        guild = member.guild
        guild_id = str(guild.id)
        
        # Enregistrer l'arriv√©e
        self.join_history[guild_id].append((member, datetime.datetime.now()))
        
        # R√©cup√©rer les param√®tres de protection
        config = SHIELD_LEVELS[self.shield_level]
        
        # V√©rifier le taux d'arriv√©es
        await self._check_join_rate(guild)
        
        # Si le serveur est en mode verrouillage, expulser imm√©diatement
        if self._is_lockdown_active(guild_id):
            try:
                await member.send(f"‚ö†Ô∏è Le serveur **{guild.name}** est actuellement en mode verrouillage et n'accepte pas de nouveaux membres. Veuillez r√©essayer plus tard.")
            except:
                pass
            
            try:
                await member.kick(reason="Serveur en mode verrouillage")
                self.logger.info(f"Membre {member.name}#{member.discriminator} expuls√©: serveur en mode verrouillage")
                return
            except Exception as e:
                self.logger.error(f"Erreur lors de l'expulsion en mode verrouillage: {e}")
        
        # V√©rifier si le compte est trop r√©cent
        if config['new_account_restriction']:
            account_age = (datetime.datetime.now() - member.created_at).days
            min_age = 3 if self.shield_level == "medium" else (7 if self.shield_level == "high" else 14)
            
            if account_age < min_age:
                try:
                    await member.send(f"‚ö†Ô∏è Votre compte Discord est trop r√©cent pour rejoindre **{guild.name}**.\nLes comptes doivent avoir au moins {min_age} jours pour des raisons de s√©curit√©.")
                except:
                    pass
                
                try:
                    await member.kick(reason=f"Compte trop r√©cent ({account_age} jours)")
                    self.logger.info(f"Membre {member.name}#{member.discriminator} expuls√©: compte trop r√©cent ({account_age} jours)")
                    return
                except Exception as e:
                    self.logger.error(f"Erreur lors de l'expulsion pour compte r√©cent: {e}")
        
        # V√©rifier si le compte est suspect
        if config['auto_ban_suspicious'] and await self._is_suspicious(member):
            try:
                await member.send(f"‚ö†Ô∏è Vous avez √©t√© banni de **{guild.name}** car votre compte a √©t√© identifi√© comme suspect par notre syst√®me de s√©curit√©.")
            except:
                pass
            
            try:
                await member.ban(reason="Compte suspect")
                self.logger.info(f"Membre {member.name}#{member.discriminator} banni: compte suspect")
                return
            except Exception as e:
                self.logger.error(f"Erreur lors du bannissement pour compte suspect: {e}")
        
        # Si la v√©rification est requise, envoyer un message dans le canal appropri√©
        if config['verification_required'] and guild_id in self.verification_channels:
            verification_channel_id = self.verification_channels[guild_id]
            verification_channel = guild.get_channel(int(verification_channel_id))
            
            if verification_channel:
                # R√¥le non v√©rifi√©
                unverified_role = discord.utils.get(guild.roles, name="Non V√©rifi√©")
                if unverified_role:
                    try:
                        await member.add_roles(unverified_role)
                    except Exception as e:
                        self.logger.error(f"Erreur lors de l'attribution du r√¥le Non V√©rifi√©: {e}")
                
                # Message de v√©rification
                embed = discord.Embed(
                    title="üîê V√©rification Requise",
                    description=f"Bienvenue {member.mention} sur **{guild.name}**!\n\nPour acc√©der au serveur, veuillez compl√©ter la v√©rification en r√©agissant √† ce message avec ‚úÖ.",
                    color=discord.Color.blue()
                )
                embed.set_footer(text="Cette v√©rification est une mesure de s√©curit√© contre les bots et les raids.")
                
                try:
                    verify_msg = await verification_channel.send(embed=embed)
                    await verify_msg.add_reaction("‚úÖ")
                except Exception as e:
                    self.logger.error(f"Erreur lors de l'envoi du message de v√©rification: {e}")
    
    @commands.Cog.listener()
    async def on_message(self, message):
        """Analyse les messages pour d√©tecter les contenus malveillants."""
        # Ignorer les messages du bot et des DM
        if message.author.bot or not message.guild:
            return
        
        # Ignorer les membres de confiance
        if self._is_trusted(message.author):
            return
        
        # V√©rifier les contenus malveillants
        if await self._contains_malicious_content(message):
            # Supprimer le message
            try:
                await message.delete()
            except Exception as e:
                self.logger.error(f"Erreur lors de la suppression du message malveillant: {e}")
                return
            
            # Avertir ou prendre des mesures selon le niveau de protection
            config = SHIELD_LEVELS[self.shield_level]
            
            if config['auto_ban_suspicious']:
                try:
                    await message.author.ban(reason="Contenu malveillant d√©tect√©", delete_message_days=1)
                    self.logger.warning(f"Utilisateur {message.author.name}#{message.author.discriminator} banni pour contenu malveillant")
                except Exception as e:
                    self.logger.error(f"Erreur lors du bannissement pour contenu malveillant: {e}")
            else:
                # Log dans un canal appropri√©
                log_channel = discord.utils.get(message.guild.text_channels, name="bot-logs") or message.guild.system_channel
                if log_channel:
                    embed = discord.Embed(
                        title="‚ö†Ô∏è Contenu Malveillant D√©tect√©",
                        description=f"Un message potentiellement malveillant de {message.author.mention} a √©t√© supprim√©.",
                        color=discord.Color.red()
                    )
                    embed.add_field(name="Canal", value=message.channel.mention)
                    embed.add_field(name="Horodatage", value=message.created_at.strftime('%d/%m/%Y %H:%M:%S'))
                    
                    await log_channel.send(embed=embed)
    
    @commands.Cog.listener()
    async def on_raw_reaction_add(self, payload):
        """Gestion des r√©actions pour la v√©rification."""
        # Ignorer les r√©actions du bot
        if payload.user_id == self.bot.user.id:
            return
        
        guild_id = str(payload.guild_id) if payload.guild_id else None
        
        # V√©rifier si c'est une r√©action dans un canal de v√©rification
        if guild_id and guild_id in self.verification_channels and str(payload.channel_id) == self.verification_channels[guild_id]:
            guild = self.bot.get_guild(payload.guild_id)
            if not guild:
                return
                
            # V√©rifier si c'est la bonne r√©action
            if str(payload.emoji) == "‚úÖ":
                member = guild.get_member(payload.user_id)
                if not member:
                    return
                
                # V√©rifier si le membre a le r√¥le "Non V√©rifi√©"
                unverified_role = discord.utils.get(guild.roles, name="Non V√©rifi√©")
                verified_role = discord.utils.get(guild.roles, name="V√©rifi√©")
                
                if unverified_role and unverified_role in member.roles:
                    # Retirer le r√¥le "Non V√©rifi√©"
                    try:
                        await member.remove_roles(unverified_role)
                    except Exception as e:
                        self.logger.error(f"Erreur lors du retrait du r√¥le Non V√©rifi√©: {e}")
                    
                    # Ajouter le r√¥le "V√©rifi√©"
                    if verified_role:
                        try:
                            await member.add_roles(verified_role)
                        except Exception as e:
                            self.logger.error(f"Erreur lors de l'attribution du r√¥le V√©rifi√©: {e}")
                    
                    # Envoyer un message de bienvenue (syst√®me ou DM)
                    try:
                        await member.send(f"‚úÖ V√©rification r√©ussie! Bienvenue sur **{guild.name}**.")
                    except:
                        pass
                    
                    # Log la v√©rification
                    self.logger.info(f"Membre {member.name}#{member.discriminator} v√©rifi√© sur {guild.name}")
    
    async def _check_join_rate(self, guild):
        """V√©rifie le taux d'arriv√©es et active le verrouillage si n√©cessaire."""
        guild_id = str(guild.id)
        
        # Obtenir les arriv√©es de la derni√®re minute
        cutoff_time = datetime.datetime.now() - datetime.timedelta(minutes=1)
        recent_joins = [entry for entry in self.join_history[guild_id] if entry[1] > cutoff_time]
        
        # R√©cup√©rer les param√®tres de protection
        config = SHIELD_LEVELS[self.shield_level]
        
        # V√©rifier si le taux d√©passe la limite
        if len(recent_joins) > config['join_rate_limit']:
            # Activer le verrouillage si pas d√©j√† actif
            if not self._is_lockdown_active(guild_id):
                await self._enable_lockdown(guild, duration=30)  # 30 minutes par d√©faut
    
    async def _enable_lockdown(self, guild, duration=30):
        """Active le mode verrouillage sur un serveur."""
        guild_id = str(guild.id)
        
        # D√©finir le statut de verrouillage
        until_time = datetime.datetime.now() + datetime.timedelta(minutes=duration)
        self.lockdown_status[guild_id] = {
            'active': True,
            'until': until_time.timestamp(),
            'reason': 'Taux d\'arriv√©es anormal d√©tect√©'
        }
        
        # Sauvegarder les donn√©es
        self._save_data()
        
        # Log l'activation
        self.logger.warning(f"Mode verrouillage activ√© sur {guild.name} pour {duration} minutes")
        
        # Trouver le r√¥le everyone
        everyone_role = guild.default_role
        
        # Verrouiller les invitations
        try:
            await guild.edit(invites_disabled=True)
        except:
            pass
        
        # Annoncer dans le canal syst√®me
        system_channel = guild.system_channel
        if system_channel:
            embed = discord.Embed(
                title="üîí Mode Verrouillage Activ√©",
                description=f"Suite √† un flux anormal de nouveaux membres, le serveur est temporairement verrouill√©.",
                color=discord.Color.red()
            )
            embed.add_field(name="Dur√©e", value=f"{duration} minutes")
            embed.add_field(name="Fin pr√©vue", value=until_time.strftime('%d/%m/%Y %H:%M:%S'))
            embed.set_footer(text="Les nouveaux membres seront automatiquement expuls√©s pendant cette p√©riode.")
            
            await system_channel.send(embed=embed)
        
        # Expulser les membres r√©cemment arriv√©s (moins de 10 minutes)
        cutoff_time = datetime.datetime.now() - datetime.timedelta(minutes=10)
        recent_members = [member for member in guild.members if member.joined_at and member.joined_at.replace(tzinfo=None) > cutoff_time]
        
        for member in recent_members:
            try:
                await member.send(f"‚ö†Ô∏è Le serveur **{guild.name}** vient d'activer son mode verrouillage suite √† une activit√© suspecte. Vous avez √©t√© expuls√© par mesure de s√©curit√©. Vous pourrez rejoindre √† nouveau ult√©rieurement.")
            except:
                pass
            
            try:
                await member.kick(reason="Verrouillage de s√©curit√© activ√©")
            except Exception as e:
                self.logger.error(f"Erreur lors de l'expulsion pendant le verrouillage: {e}")
    
    async def _disable_lockdown(self, guild_id):
        """D√©sactive le mode verrouillage sur un serveur."""
        guild = self.bot.get_guild(int(guild_id))
        if not guild:
            # Supprimer l'entr√©e si le serveur n'existe plus
            if guild_id in self.lockdown_status:
                del self.lockdown_status[guild_id]
                self._save_data()
            return
        
        # Mettre √† jour le statut
        self.lockdown_status[guild_id] = {'active': False}
        
        # Sauvegarder les donn√©es
        self._save_data()
        
        # Log la d√©sactivation
        self.logger.info(f"Mode verrouillage d√©sactiv√© sur {guild.name}")
        
        # R√©activer les invitations
        try:
            await guild.edit(invites_disabled=False)
        except:
            pass
        
        # Annoncer dans le canal syst√®me
        system_channel = guild.system_channel
        if system_channel:
            embed = discord.Embed(
                title="üîì Mode Verrouillage D√©sactiv√©",
                description="Le serveur est de nouveau ouvert aux nouveaux membres.",
                color=discord.Color.green()
            )
            
            await system_channel.send(embed=embed)
    
    def _is_lockdown_active(self, guild_id):
        """V√©rifie si un serveur est en mode verrouillage."""
        return guild_id in self.lockdown_status and self.lockdown_status[guild_id].get('active', False)
    
    def _is_trusted(self, member):
        """V√©rifie si un membre est dans la liste de confiance."""
        return str(member.id) in self.trusted_members
    
    async def _is_suspicious(self, member):
        """V√©rifie si un compte utilisateur est suspect."""
        # V√©rifier l'√¢ge du compte
        account_age = (datetime.datetime.now() - member.created_at).days
        if account_age < 1:  # Compte cr√©√© il y a moins d'un jour
            return True
        
        # V√©rifier le nom d'utilisateur et le discriminateur
        username = f"{member.name}#{member.discriminator}" if hasattr(member, 'discriminator') else member.name
        
        # V√©rifier les motifs suspects dans le nom
        for pattern in self.suspicious_patterns:
            if pattern.search(username) or pattern.search(member.display_name):
                return True
        
        # V√©rifier le format du nom (suite de caract√®res al√©atoires)
        if re.match(r"^[a-zA-Z0-9]{8,}$", member.name) and account_age < 7:
            return True
        
        return False
    
    async def _contains_malicious_content(self, message):
        """V√©rifie si un message contient du contenu malveillant."""
        content = message.content.lower()
        
        # V√©rifier les liens d'invitation Discord (hors membres de confiance)
        if "discord.gg/" in content and not message.author.guild_permissions.create_instant_invite:
            return True
        
        # V√©rifier les motifs suspects dans le contenu
        for pattern in self.suspicious_patterns:
            if pattern.search(content):
                return True
        
        # V√©rifier les URLs potentiellement dangereuses
        urls = re.findall(r'https?://(?:[-\w.]|(?:%[\da-fA-F]{2}))+', content)
        for url in urls:
            # Liste de domaines suspects (√† compl√©ter au besoin)
            suspicious_domains = ["discordap.com", "discordnitro.fun", "discord-app.net", "steamcomunnity",
                               "dlscrod", "discocl", "discordgift", "steancommunity"]
            
            for domain in suspicious_domains:
                if domain in url:
                    return True
        
        # V√©rifier les @everyone ou @here inappropri√©s
        if ("@everyone" in content or "@here" in content) and not message.author.guild_permissions.mention_everyone:
            return True
        
        return False
    
    @commands.group(name="shield", aliases=["bouclier"])
    @commands.has_permissions(administrator=True)
    async def shield_cmd(self, ctx):
        """Gestion du bouclier de protection du serveur."""
        if ctx.invoked_subcommand is None:
            await self._show_shield_status(ctx)
    
    @shield_cmd.command(name="level", aliases=["niveau"])
    async def shield_level_cmd(self, ctx, level: str):
        """D√©finit le niveau de protection du bouclier (low, medium, high, lockdown)."""
        if level.lower() not in SHIELD_LEVELS:
            await ctx.send(f"‚ùå Niveau de protection invalide. Choisissez parmi: {', '.join(SHIELD_LEVELS.keys())}")
            return
        
        self.shield_level = level.lower()
        
        # Sauvegarder la configuration
        self._save_data()
        
        # Cr√©er un embed pour montrer les param√®tres du niveau choisi
        config = SHIELD_LEVELS[self.shield_level]
        
        embed = discord.Embed(
            title=f"üõ°Ô∏è Niveau de Protection: {self.shield_level.upper()}",
            description="Les param√®tres du bouclier ont √©t√© mis √† jour.",
            color=discord.Color.blue()
        )
        
        embed.add_field(name="Limite d'arriv√©es", value=f"{config['join_rate_limit']} membres/minute", inline=True)
        embed.add_field(name="V√©rification", value=f"{'Requise' if config['verification_required'] else 'Non requise'}", inline=True)
        embed.add_field(name="Restriction d'invitations", value=f"{'Activ√©e' if config['invite_restriction'] else 'D√©sactiv√©e'}", inline=True)
        embed.add_field(name="Restriction des nouveaux comptes", value=f"{'Activ√©e' if config['new_account_restriction'] else 'D√©sactiv√©e'}", inline=True)
        embed.add_field(name="Ban auto. des comptes suspects", value=f"{'Activ√©' if config['auto_ban_suspicious'] else 'D√©sactiv√©'}", inline=True)
        
        await ctx.send(embed=embed)
        
        # Log le changement
        self.logger.info(f"Niveau de protection modifi√© √† {self.shield_level} par {ctx.author.name}#{ctx.author.discriminator}")
        
        # Si lockdown, activer imm√©diatement
        if level.lower() == "lockdown":
            await self._enable_lockdown(ctx.guild, duration=60)
    
    @shield_cmd.command(name="status", aliases=["statut", "√©tat", "etat"])
    async def shield_status_cmd(self, ctx):
        """Affiche le statut actuel et les param√®tres du bouclier."""
        await self._show_shield_status(ctx)
    
    @shield_cmd.command(name="verify", aliases=["v√©rifier", "verification", "v√©rification"])
    async def shield_verify_cmd(self, ctx, channel: typing.Optional[discord.TextChannel] = None):
        """D√©finit le canal de v√©rification pour les nouveaux membres."""
        channel = channel or ctx.channel
        
        guild_id = str(ctx.guild.id)
        self.verification_channels[guild_id] = str(channel.id)
        
        # Sauvegarder la configuration
        self._save_data()
        
        await ctx.send(f"‚úÖ Canal de v√©rification d√©fini: {channel.mention}")
        
        # V√©rifier que les r√¥les n√©cessaires existent
        unverified_role = discord.utils.get(ctx.guild.roles, name="Non V√©rifi√©")
        verified_role = discord.utils.get(ctx.guild.roles, name="V√©rifi√©")
        
        missing_roles = []
        if not unverified_role:
            missing_roles.append("Non V√©rifi√©")
        if not verified_role:
            missing_roles.append("V√©rifi√©")
        
        if missing_roles:
            await ctx.send(f"‚ö†Ô∏è Attention: Les r√¥les suivants n'existent pas: {', '.join(missing_roles)}\nVeuillez les cr√©er pour que le syst√®me de v√©rification fonctionne correctement.")
    
    @shield_cmd.command(name="trust", aliases=["confiance"])
    async def shield_trust_cmd(self, ctx, member: discord.Member):
        """Ajoute un membre √† la liste de confiance."""
        self.trusted_members.add(str(member.id))
        
        # Sauvegarder la configuration
        self._save_data()
        
        await ctx.send(f"‚úÖ {member.mention} a √©t√© ajout√© √† la liste de confiance.")
        
        # Log l'action
        self.logger.info(f"{member.name}#{member.discriminator} ajout√© √† la liste de confiance par {ctx.author.name}#{ctx.author.discriminator}")
    
    @shield_cmd.command(name="untrust", aliases=["m√©fiance", "mefiance"])
    async def shield_untrust_cmd(self, ctx, member: discord.Member):
        """Retire un membre de la liste de confiance."""
        if str(member.id) in self.trusted_members:
            self.trusted_members.remove(str(member.id))
            
            # Sauvegarder la configuration
            self._save_data()
            
            await ctx.send(f"‚úÖ {member.mention} a √©t√© retir√© de la liste de confiance.")
            
            # Log l'action
            self.logger.info(f"{member.name}#{member.discriminator} retir√© de la liste de confiance par {ctx.author.name}#{ctx.author.discriminator}")
        else:
            await ctx.send(f"‚ùå {member.mention} n'est pas dans la liste de confiance.")
    
    @shield_cmd.command(name="lockdown")
    async def shield_lockdown_cmd(self, ctx, duration: typing.Optional[int] = 30):
        """Active le mode verrouillage sur le serveur."""
        if duration < 5 or duration > 1440:
            await ctx.send("‚ùå La dur√©e doit √™tre entre 5 et 1440 minutes (24 heures).")
            return
        
        # Activer le verrouillage
        await self._enable_lockdown(ctx.guild, duration=duration)
        
        await ctx.send(f"üîí Mode verrouillage activ√© pour {duration} minutes.")
    
    @shield_cmd.command(name="unlock", aliases=["d√©verrouiller", "deverrouiller"])
    async def shield_unlock_cmd(self, ctx):
        """D√©sactive le mode verrouillage sur le serveur."""
        guild_id = str(ctx.guild.id)
        
        if not self._is_lockdown_active(guild_id):
            await ctx.send("‚ùå Le serveur n'est pas en mode verrouillage.")
            return
        
        # D√©sactiver le verrouillage
        await self._disable_lockdown(guild_id)
        
        await ctx.send("üîì Mode verrouillage d√©sactiv√©.")
    
    async def _show_shield_status(self, ctx):
        """Affiche les informations sur la configuration du bouclier actuel."""
        config = SHIELD_LEVELS[self.shield_level]
        guild_id = str(ctx.guild.id)
        
        embed = discord.Embed(
            title="üõ°Ô∏è Statut du Bouclier de Protection",
            description=f"**Niveau actuel**: {self.shield_level.upper()}",
            color=discord.Color.blue()
        )
        
        # Statut du verrouillage
        lockdown_status = "Actif" if self._is_lockdown_active(guild_id) else "Inactif"
        lockdown_color = "üî¥" if self._is_lockdown_active(guild_id) else "üü¢"
        
        # Canal de v√©rification
        verification_channel = None
        if guild_id in self.verification_channels:
            channel_id = int(self.verification_channels[guild_id])
            verification_channel = ctx.guild.get_channel(channel_id)
        
        # Statistiques
        embed.add_field(name="Statut du verrouillage", value=f"{lockdown_color} {lockdown_status}", inline=True)
        embed.add_field(name="Canal de v√©rification", value=verification_channel.mention if verification_channel else "Non configur√©", inline=True)
        embed.add_field(name="Membres de confiance", value=f"{len(self.trusted_members)}", inline=True)
        
        # Param√®tres actuels
        embed.add_field(name="Param√®tres de Protection", value="\u200b", inline=False)
        embed.add_field(name="Limite d'arriv√©es", value=f"{config['join_rate_limit']} membres/minute", inline=True)
        embed.add_field(name="V√©rification", value=f"{'Requise' if config['verification_required'] else 'Non requise'}", inline=True)
        embed.add_field(name="Restriction d'invitations", value=f"{'Activ√©e' if config['invite_restriction'] else 'D√©sactiv√©e'}", inline=True)
        embed.add_field(name="Restriction des nouveaux comptes", value=f"{'Activ√©e' if config['new_account_restriction'] else 'D√©sactiv√©e'}", inline=True)
        embed.add_field(name="Ban auto. des comptes suspects", value=f"{'Activ√©' if config['auto_ban_suspicious'] else 'D√©sactiv√©'}", inline=True)
        
        # Informations sur les actions r√©centes
        if guild_id in self.action_logs and self.action_logs[guild_id]:
            recent_actions = self.action_logs[guild_id][-5:]  # 5 derni√®res actions
            
            action_text = "\n".join([f"‚Ä¢ {action['time'].strftime('%H:%M:%S')} - {action['action']}: {action['target']}" 
                                   for action in recent_actions])
            
            embed.add_field(name="Actions r√©centes", value=action_text or "Aucune action r√©cente", inline=False)
        
        await ctx.send(embed=embed)

async def setup(bot):
    """Ajoute le cog de bouclier au bot."""
    await bot.add_cog(Shield(bot))